#!/bin/bash-*-Shell-script-functions*-

###########################################################################
### Author:  Panagiotis Velissariou <panagiotis.velissariou@noaa.gov>
###
### Version - 1.0
###
###   1.0 Sun Mar 08 2022
###########################################################################

set +u

##################################################
### BEG:: UTILITY FUNCTIONS
##################################################

###========================================
### isInteger()
### Usage:      isInteger var
### Parameters: var
### Returns:    1 if var is not an integer (0 is an integer as well)
###             0 in any other case
### Echoes:     NONE
###========================================
isInteger()
{
  local -i retval=1

  [ $# -eq 0 ] && return ${retval}

  if [ "${1:-UNDEF}" -eq "${1}" ] 2>/dev/null
  then
    retval=0
  fi

  return ${retval}
}

###========================================
### getInteger()
### Usage:      getInteger int
### Parameters: int (int >=0 or, int < 0)
### Returns:    1 if var is not an integer
###             0 in any other case
### Echoes:     int, if it is a valid integer (including 0),
###             in any other case echoes an empty string
###========================================
getInteger()
{
  local -i retval=0
  local echoval= minus=

  # strip spaces, '+' signs and '-' signs
  # if the first character of the string is '-', set the minus variable
  echoval="$( echo "${1}" | sed 's/[[:space:]+]//g' )"
  [ "X$( echo "${echoval:0:1}" )" = "X-" ] && minus="-"
  echoval="${minus}$( echo "${echoval}" | sed 's/[[:space:]-]//g' )"

  if isInteger ${echoval}; then
    echoval="$(echo "scale=0; ${echoval} + 0" | bc -ql 2>/dev/null)"
    retval=$?
    echoval="${echoval:-0}"
  else
    echoval=
    retval=1
  fi

  echo -n ${echoval}

  return ${retval}
}

###========================================
### getPosInteger()
### Usage:      getPosInteger posint
### Parameters: posint (posint >= 0)
### Returns:    1 if var is not a positive integer
###             0 in any other case
### Echoes:     posint if it is a valid positive integer
###             (including 0), in any other case echoes an
###             empty string
###========================================
getPosInteger()
{
  local -i retval=0
  local echoval=

  echoval=$( getInteger "${1}" )
  retval=$?

  if [ ${retval} -ne 0 ] ; then
    echoval=
    retval=1
  else
    if [ ${echoval} -lt 0 ]; then
      echoval=
      retval=1
    fi
  fi

  echo -n ${echoval}

  return ${retval}
}

###========================================
### getYesNo()
### Usage:      getYesNo value
### Parameters:
###   value : The input value (the value of a parameter)
###           The value of a bash parameter that is checked
###           against TRUE/FALSE. If the value is one of:
###             ">=1|y|yes|yea|yeah|yep"
###           then the value of parameter is TRUE (answer = yes).
###           If the value is one of:
###             "<=0|n|no|not|nop|nope"
###           then the value of parameter is FALSE (answer = no).
###           If the value is empty then the value of parameter
###           is FALSE (answer = no)
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : A "yes" or "no" answer.
###
### getYesNo: Checks if a parameter is assigned a TRUE/FALSE value.
###========================================
getYesNo()
{
  local param answer
  
  param="$( echo "${1}" | tr '[:upper:]' '[:lower:]' )"

  if [ "${param}" -eq "${param}" ] 2>/dev/null
  then
    [ ${param} -le 0 ] && param=0
    [ ${param} -gt 0 ] && param=1
  fi

  case "${param}" in
    1|y|yes|yea|yeah|yep) answer="yes" ;;
     0|n|no|not|nop|nope) answer="no"  ;;
                       *) answer=""    ;; # DEFAULT
  esac

  echo -n "${answer}"
}

###========================================
### toUPPER()
### Usage:      toUPPER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all upper case string
###
### toUPPER: Converts a string to an all upper case string
###========================================
toUPPER()
{
  echo "${1}" | tr '[:lower:]' '[:upper:]'
}

###========================================
### toLOWER()
### Usage:      toLOWER string
### Parameters:
###   string : The string in to convert
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The input string converted to an all lower case string
###
### toLOWER: Converts a string to an all lower case string
###========================================
toLOWER()
{
  echo "${1}" | tr '[:upper:]' '[:lower:]'
}

###========================================
### strESC()
### Usage:      strESC string
### Parameters:
###   string : The input string
###            The input string on which this function is applied
###            to escape special characters used in bash/sed ...
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The modified string with its special characters escaped
###
### strESC: Escapes special characters in a string: "'()/[]*.
###========================================
strESC()
{
  echo -n "$( echo "${*}" | sed -e "s/[\"\'\(\)\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

strESC1()
{
  echo -n "$( echo "${*}" | sed -e "s/[\&\/\*\!]/\\\&/g;s/\[/\\\&/g;s/\]/\\\&/g" )"
}

###========================================
### strTrim()
### Usage:      strTrim s1 flag
### Parameters:
###     s1 : The input string
###   flag : Integer
###          A value that controls the action of strTrim.
###          If flag is zero or not present, trailing blanks are removed.
###          Leading blanks are removed if it is equal to 1.
###          Both are removed if it is equal to 2.
###          In any other case, trailing blanks are removed.
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : s1 with all leading and/or trailing
###           white spaces removed.
###
### strTrim: Removes all leading and/or trailing white spaces
###          from the input string
###========================================
strTrim ()
{
  local trimFLG="${2:-0}"
  local out_str=

  case ${trimFLG} in
    0) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
    1) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//')" ;;
    2) out_str="$(echo "${1}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')" ;;
    *) out_str="$(echo "${1}" | sed 's/[[:space:]]*$//')" ;;
  esac

  echo -n ${out_str}
}

###========================================
### getMakeVerbosity()
### Usage:      getMakeVerbosity verbosity_flag
### Parameters:
###   verbosity_flag : The verbosity flag
###
### Returns : NONE
###
### Exports : NONE
###
### Echoes  : The filtered verbosity flag
###
### getMakeVerbosity: Gets a valid GNU make verbosity flag
###========================================
getMakeVerbosity ()
{
  local opt_verb opt_verb i

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( toLOWER "${opt_inp}" )"
  opt_inp="$( echo "${opt_inp}" | sed 's@[_/ .,:]@ @g' )"

  opt_verb=
  for i in ${opt_inp}
  do
    if `isInteger "${i}"` ; then
      [ ${i} -ge 1 ] && i=1
      [ ${i} -le 0 ] && i=0
    else
      [ "$( getYesNo "${i}" )" = "yes" ] && i=yes
      [ "$( getYesNo "${i}" )" = "no" ] && i=no
    fi

    case "${i}" in
      yes|1) opt_verb=b
         break
         ;;
      n|no|0) opt_verb=
         break
         ;;
      a) opt_verb=a
         break
         ;;
      b|v|i|j|m)
         if [ -z "${opt_verb}" ]; then
           opt_verb="${i}"
         else
           opt_verb="${opt_verb},${i}"
         fi
         ;;
      *) ;;
    esac
  done

  echo -n "${opt_verb}"
}

###========================================
### checkFuncOpt()
### Usage:      checkFuncOpt opt_name
### Parameters:
###   opt_name: The name of the option to a function
###
### Returns : Exits on error
###
### Exports : __OPTION_LIST
###
### Echoes  : NONE
###
### checkFuncOpt: Checks if an option to a function is already supplied.
###========================================
checkFuncOpt() {
  local opt_inp opt_list

  [ $# -eq 0 ] && return -1

  opt_inp="$( strTrim "${1}" 2 )"
  opt_inp="$( echo "${opt_inp}" | sed 's/^[-]*//' )"

  opt_list="$( strTrim "${__OPTION_LIST}" 2 )"
  [ -n ${opt_list:+1} ] && \
    opt_list=":$( echo "${opt_list}" | sed 's/ /:/g' ):"

  [ "$( echo "${opt_list}" | egrep -o ":${opt_inp}:" )" ] && return 1

  __OPTION_LIST="${__OPTION_LIST} ${opt_inp}"
  export __OPTION_LIST

  return 0
}

###========================================
### getCompilerNames()
###
### Usage:      getCompilerNames compile_family
###
### Parameters: compile_family = one of: gnu, intel, pgi
###
### Returns : error status
###
### Exports : CC CXX FC F90 PCC PCXX PFC PF90
###
### Echoes  : NONE
###
### getCompilerNames: Exports the compiler names for a compiler family.
###========================================
getCompilerNames()
{
  local cmp_family
  local err=0

  [ $# -eq 0 ] && return ${err}

  cmp_family="$( toLOWER "${1}" )"

  case "${cmp_family}" in
    gnu)
       CC=${CC:-gcc}
       CXX=${CXX:-g++}
       FC=${FC:-gfortran}
       F90=${F90:-gfortran}
       PCC=${PCC:-mpicc}
       PCXX=${PCXX:-mpicxx}
       PFC=${PFC:-mpif90}
       PF90=${PF90:-mpif90}
       ;;
    intel)
       CC=${CC:-icc}
       CXX=${CXX:-icpc}
       FC=${FC:-ifort}
       F90=${F90:-ifort}
       PCC=${PCC:-mpiicc}
       PCXX=${PCXX:-mpiicpc}
       PFC=${PFC:-mpiifort}
       PF90=${PF90:-mpiifort}
       ;;
    pgi)
       CC=${CC:-pgcc}
       CXX=${CXX:-pgc++}
       FC=${FC:-pgfortran}
       F90=${F90:-pgfortran}
       PCC=${PCC:-pgcc}
       PCXX=${PCXX:-pgc++}
       PFC==${PFC:-pgfortran}
       PF90=${PF90:-pgfortran}
       ;;
    *) # No defaults. Give the user the option to define the environment variables
       # CC, CXX, FC, F90 before running this script.
       #echo "WARNING: The supplied compiling system \"${COMPILER}\", is not suported."
       #echo "         Supported systems are anyone of: compiling_system=[${MY_COMPILING_SYTEMS}]"
       #echo "         Use: --compiler=compiling_system."
       #echo "         Will continue with OS defaults."
       getCompilerNames ${MY_COMPILER_DEFAULT}
       err=1
       ;;
  esac

  export CC CXX FC F90 PCC PCXX PFC PF90

  return ${err}
}

##################################################
### END:: UTILITY FUNCTIONS
##################################################
